
import { createObjectBuffer } from "..";
import { memoryStats } from "../internal/api";
import { externalArgsApiToExternalArgsApi } from "../internal/utils";

/* eslint-env jest */

describe.skip("stringsMemoryReuse.test", () => {
  const externalArgs = externalArgsApiToExternalArgsApi({


    arrayAdditionalAllocation: 0
  });

  test("setting a shorter string, and then as original size again", () => {
    const objectBuffer = createObjectBuffer(externalArgs, 512, {
      str: "abc"
    });

    const memoryAfterEachOperation: number[] = [memoryStats(objectBuffer).used];

    objectBuffer.str = "ab";
    expect(objectBuffer).toMatchInlineSnapshot(`
          Object {
            "str": "ab",
          }
      `);
    memoryAfterEachOperation.push(memoryStats(objectBuffer).used);

    objectBuffer.str = "123";

    memoryAfterEachOperation.push(memoryStats(objectBuffer).used);

    expect(memoryAfterEachOperation).toMatchInlineSnapshot(`
      Array [
        224,
        240,
        256,
      ]
    `);

    expect(objectBuffer).toMatchInlineSnapshot(`
      Object {
        "str": "123",
      }
    `);
  });

  test("minimumStringAllocation", () => {
    const objectBuffer = createObjectBuffer(
      { ...externalArgs, minimumStringAllocation: 10 },
      512,
      {
        str: "123"
      }
    );

    const memoryAfterEachOperation: number[] = [memoryStats(objectBuffer).used];

    objectBuffer.str = "1234567890";
    expect(objectBuffer).toMatchInlineSnapshot(`
      Object {
        "str": "1234567890",
      }
    `);
    memoryAfterEachOperation.push(memoryStats(objectBuffer).used);

    objectBuffer.str = "123";
    memoryAfterEachOperation.push(memoryStats(objectBuffer).used);

    objectBuffer.str = "1234567890".repeat(2);
    memoryAfterEachOperation.push(memoryStats(objectBuffer).used);

    expect(memoryAfterEachOperation).toMatchInlineSnapshot(`
      Array [
        232,
        256,
        280,
        320,
      ]
    `);

    expect(objectBuffer).toMatchInlineSnapshot(`
      Object {
        "str": "12345678901234567890",
      }
    `);
  });
});
